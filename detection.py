import os
import time
import pywt
import cv2
import numpy as np
import matplotlib.pyplot as plt  

from wpsnr import wpsnr


# DUE TO SELF CONTAINED NATURE
ALPHA = 5.11
BLOCKS_TO_EMBED = 32
BLOCK_SIZE = 4
WATERMARK_SIZE = 1024
MIN_WPSNR = 35.00

Uwm = np.array(
[[-2.31267458e-01  ,5.73428696e-02 ,-2.26156433e-01  ,1.30579290e-01 ,-5.81210093e-03  ,1.38494753e-01  ,1.74246841e-01 ,-5.55574921e-02  ,7.71068824e-02  ,1.13620622e-01  ,2.03035610e-01  ,9.10635146e-02  ,2.08595775e-01 ,-2.42470021e-01 ,-1.11385100e-01 ,-2.07218918e-01  ,2.89637010e-01  ,3.66299869e-01 ,-7.33106387e-02  ,1.48494224e-01 ,-2.56492373e-01  ,2.16943705e-01  ,1.67666511e-03  ,8.70096585e-02 ,-2.01149970e-01 ,-1.89513387e-01 ,-2.40338304e-01 ,-1.15414849e-01  ,2.59539121e-01  ,1.20545652e-01 ,-8.00391995e-03  ,3.18239287e-02],
 [-2.05147866e-01 ,-1.96786609e-02 ,-1.76335905e-01  ,3.30735951e-03 ,-1.16140434e-01  ,1.26546687e-02 ,-3.57538902e-01  ,2.66702499e-02  ,2.92362816e-01 ,-1.55768960e-01 ,-1.41960557e-01 ,-2.65037193e-01 ,-1.54905659e-01 ,-4.99182856e-03 ,-1.61453962e-01 ,-1.39308853e-01 ,-1.35824025e-01  ,2.77714551e-01  ,1.74166303e-01  ,1.97658476e-02  ,8.39851995e-02  ,2.04621492e-02 ,-4.80131969e-02 ,-6.12143322e-02  ,2.85899271e-02 ,-4.80834954e-01  ,3.22832772e-02 ,-5.18619660e-02 ,-3.48884970e-01 ,-1.26829613e-01  ,3.16863013e-02 ,-1.45044006e-02],
 [-1.80547739e-01  ,1.81290038e-01  ,2.91480359e-01 ,-4.08781312e-02  ,1.77028642e-01  ,2.61017232e-02  ,1.31097413e-02 ,-1.17979541e-01  ,3.55584695e-01 ,-1.12395407e-01  ,2.24707035e-01  ,7.96335466e-02 ,-5.10752852e-02 ,-1.94355743e-01 ,-3.08979110e-02 ,-1.44432310e-01 ,-4.28368968e-02  ,2.48719807e-02 ,-2.39119662e-01  ,1.47999859e-02  ,1.12668912e-01  ,6.53379212e-02 ,-3.08575272e-01 ,-2.95094436e-01  ,6.19351034e-02  ,3.61226921e-01 ,-1.18209374e-01 ,-1.48105097e-01 ,-2.27209795e-01 ,-8.20203353e-02  ,2.34730241e-01  ,2.99000951e-02],
 [-1.53571124e-01 ,-7.78737334e-02  ,4.98671270e-02 ,-5.59846369e-02  ,2.99182041e-01 ,-8.63735250e-02 ,-4.59242522e-01 ,-9.17947661e-02 ,-2.45260317e-01  ,4.30543973e-02  ,1.86593396e-01 ,-1.35830466e-02  ,1.04518174e-01 ,-2.66253246e-01 ,-3.70845599e-02 ,-1.57022578e-01 ,-1.91012594e-03 ,-1.56855149e-01  ,8.00797048e-02 ,-2.45295956e-01  ,1.97931478e-01  ,1.11590420e-01 ,-1.12246803e-03 ,-1.03226638e-01  ,1.85509113e-01 ,-1.58706659e-01 ,-7.80490993e-02  ,3.08068778e-01  ,3.27172868e-01  ,1.39562604e-02  ,6.34740241e-02  ,1.35035588e-01],
 [-1.47619939e-01  ,1.25088329e-01  ,1.97985306e-02 ,-2.14309262e-01 ,-7.74775580e-02 ,-4.12035200e-01 ,-6.03779709e-02  ,1.30759262e-01 ,-2.35717874e-01  ,1.04923466e-01 ,-6.73094358e-03 ,-3.46566244e-01  ,1.02548557e-01 ,-1.71947991e-02  ,1.55052775e-03 ,-1.21358083e-01  ,2.09086212e-01  ,1.49890007e-01  ,5.42413609e-02 ,-8.05582593e-02 ,-2.77974605e-01  ,4.49955641e-02 ,-7.05316053e-02 ,-5.22071674e-02  ,3.38735352e-01  ,2.01594799e-01  ,2.42153424e-01 ,-3.38209623e-01 ,-2.75475521e-02  ,9.71776816e-02 ,-6.70766426e-02 ,-4.16631267e-02],
 [-1.96823468e-01 ,-2.60025084e-01  ,4.58783405e-02 ,-2.67447403e-01 ,-8.04102085e-02  ,2.00821318e-01  ,1.28994733e-01  ,2.64988953e-02 ,-4.46005747e-03  ,2.19438761e-01  ,5.08848450e-02  ,2.02587001e-01 ,-1.69655124e-02 ,-1.91666537e-01  ,2.20197388e-01 ,-1.72047303e-01 ,-3.98236590e-01  ,6.84177744e-02  ,1.76506101e-01  ,4.40855332e-02  ,2.43731517e-01  ,4.07285637e-03  ,5.45224857e-02  ,5.40300289e-02  ,8.17582363e-02  ,2.58087618e-02  ,1.09281289e-01 ,-3.07178633e-01 ,-1.42371755e-02  ,1.48801026e-01 ,-3.25052375e-01  ,2.13594544e-01],
 [-1.53722931e-01  ,7.78815542e-02 ,-3.34502971e-01 ,-2.17243024e-02 ,-8.72509466e-02 ,-1.30397849e-01  ,2.84449892e-01  ,2.81604063e-01 ,-7.20457870e-02 ,-5.68169470e-02  ,2.63002588e-01 ,-3.40167457e-02 ,-7.32732740e-02 ,-1.09842931e-01  ,1.74590852e-01 ,-6.50952961e-02  ,1.21826371e-01 ,-8.28670961e-02 ,-4.98430627e-04 ,-7.17141510e-02  ,4.69296092e-01  ,1.60375586e-01 ,-1.09818177e-02  ,5.63838053e-02 ,-1.42296243e-01 ,-8.50951328e-03  ,2.86802735e-01  ,7.43617649e-02 ,-5.68173656e-03 ,-2.28829217e-01  ,1.70260624e-01 ,-2.76785114e-01],
 [-1.85742155e-01  ,9.17948123e-02 ,-1.21459696e-01 ,-1.20522369e-02 ,-4.04642744e-01  ,1.17920903e-01 ,-1.94391493e-01 ,-2.72801756e-02 ,-1.07409272e-01  ,9.15564524e-03 ,-2.94812753e-02  ,3.16026076e-01  ,1.40140441e-01 ,-2.25255359e-01  ,3.37130904e-03  ,6.56155709e-02  ,1.08710269e-01 ,-2.59028105e-01 ,-9.86079098e-03  ,5.94009520e-02 ,-2.42099336e-01  ,1.10550370e-01  ,2.86959945e-01 ,-6.44530007e-02  ,2.30074881e-02  ,1.05261181e-01  ,1.78973024e-01  ,1.12893836e-01 ,-3.38646905e-01 ,-9.53931559e-02  ,2.09495156e-01  ,2.73890348e-01],
 [-2.01538158e-01 ,-1.10925658e-01 ,-2.66650864e-01 ,-4.64702876e-02  ,3.72564245e-01 ,-3.06875892e-01  ,7.69092502e-03 ,-1.55502051e-01  ,4.44578151e-02 ,-1.51080775e-01  ,1.52369055e-01  ,2.49442872e-01  ,7.20703057e-02  ,6.53936046e-02  ,2.36939541e-01  ,1.26105786e-01  ,9.65489475e-02  ,1.67505211e-01 ,-1.34542067e-02  ,2.58333261e-01 ,-9.20973555e-02 ,-3.67094794e-01  ,6.50393108e-02  ,1.83442592e-02  ,1.42760622e-01  ,1.74345163e-02  ,1.31437823e-02  ,1.72227088e-01 ,-1.81509264e-01 ,-1.81593126e-01 ,-2.32741747e-01  ,4.61680262e-02],
 [-1.74596799e-01 ,-2.59472492e-01  ,5.59015726e-02  ,1.14156941e-01 ,-8.04110326e-02  ,6.63720223e-02 ,-3.88346758e-01  ,1.15795448e-01  ,2.46245463e-01 ,-2.40663397e-03  ,2.15320209e-01 ,-7.03625902e-02  ,9.87175520e-02  ,1.81802545e-01 ,-5.04511225e-02  ,1.59300130e-01  ,2.23852686e-01  ,2.25268300e-02 ,-2.67125799e-01 ,-2.45935421e-01  ,1.64315812e-01 ,-1.02012285e-01  ,3.35240866e-01  ,7.53242631e-02 ,-1.94348166e-01  ,2.20835188e-01  ,3.57093457e-02 ,-2.16863416e-01  ,4.82152351e-02  ,6.18034531e-02 ,-2.04699175e-01 ,-8.63136602e-02],
 [-1.54412057e-01  ,8.49771703e-02  ,6.14031180e-02  ,1.03518264e-01 ,-1.24379083e-01 ,-3.73335852e-01  ,1.92844794e-01  ,1.88187832e-01  ,2.56223437e-01  ,1.02932574e-01 ,-2.00501870e-01  ,3.25073116e-01 ,-1.24259971e-01  ,1.58065527e-01 ,-6.23386468e-02 ,-1.81889701e-01 ,-1.71785488e-01  ,1.25056729e-01 ,-7.22072654e-02 ,-4.02729142e-01 ,-1.14506107e-01 ,-3.87671087e-02  ,1.83744287e-01 ,-2.06523851e-01  ,2.60137937e-02 ,-5.44102132e-02 ,-1.15728821e-03  ,1.33999343e-01  ,2.48811351e-01 ,-1.41262101e-01 ,-7.93998512e-03  ,1.42756297e-01],
 [-1.23329732e-01 ,-8.52930599e-02  ,2.59786125e-01  ,1.54326002e-01 ,-3.07205118e-02  ,4.75734369e-02  ,2.47518151e-01 ,-2.78360619e-01  ,1.69565419e-01 ,-2.96173709e-01 ,-2.08193703e-01 ,-9.33022478e-03  ,9.26687331e-02 ,-1.76769170e-01 ,-3.42499188e-02 ,-6.25916867e-03  ,1.92971970e-01 ,-1.84688027e-01  ,6.43444597e-02  ,8.49196169e-02  ,1.05907081e-01  ,7.78631075e-02  ,3.16347712e-01  ,2.13067304e-03  ,4.23405940e-01 ,-1.62307278e-01  ,9.28932012e-02 ,-1.28060047e-01  ,1.51122145e-01 ,-7.88893062e-02 ,-7.19060800e-02 ,-2.79941379e-01],
 [-1.46913892e-01 ,-2.15033575e-01 ,-1.87369166e-01  ,5.40262449e-02 ,-2.15095105e-01  ,1.89996902e-01  ,5.90569341e-04 ,-1.37327946e-01 ,-3.59000841e-01 ,-6.89664422e-02 ,-2.00728139e-01  ,1.29114744e-02 ,-1.54294437e-01  ,6.83234402e-02 ,-2.04028700e-01 ,-2.09867927e-01 ,-3.90797841e-02  ,1.73128376e-01 ,-3.66228409e-01  ,6.53437768e-02  ,7.48784363e-02  ,1.16165865e-02 ,-1.31576085e-01 ,-2.69907209e-01  ,1.12492353e-01  ,2.35924110e-01 ,-1.86833649e-02  ,2.48258397e-01  ,2.33710476e-03 ,-6.17396236e-03 ,-2.37695094e-01 ,-2.28138194e-01],
 [-2.36694447e-01  ,6.49725449e-02  ,1.29092201e-01  ,1.11734491e-02 ,-8.44741020e-02  ,8.78905576e-02 ,-1.73320670e-01  ,1.99482814e-01 ,-3.31506838e-02 ,-2.58605248e-01 ,-2.15875633e-01  ,1.63247225e-01 ,-2.63011924e-01  ,1.67060369e-01  ,5.26092055e-01  ,1.34633255e-01  ,2.76890388e-01  ,8.50699877e-02  ,3.88999328e-02  ,1.15884217e-01  ,4.31102757e-02  ,1.27882973e-01 ,-1.98740553e-01 ,-8.29792153e-02  ,2.06127572e-02 ,-6.16340046e-02 ,-5.56805061e-02  ,7.03390728e-03  ,1.84845951e-01  ,2.97016504e-01  ,7.45054655e-02  ,7.94029182e-02],
 [-1.59115730e-01 ,-3.80104264e-02  ,1.74300143e-01  ,3.67527701e-01 ,-4.55533011e-03  ,1.12964271e-01 ,-2.17170685e-02  ,2.42269990e-03 ,-3.12369686e-01 ,-1.30229324e-01 ,-2.37076053e-02  ,1.66171645e-01  ,3.09064510e-01  ,6.55672280e-02 ,-6.34580141e-02 ,-3.95757571e-02 ,-3.54605436e-02  ,7.77504870e-02  ,2.89293618e-01 ,-1.02200587e-01  ,5.64518539e-03 ,-3.64132392e-01 ,-2.67581873e-01 ,-1.43209986e-01 ,-2.24798282e-01 ,-3.77406910e-02  ,2.06955111e-01 ,-2.58597317e-01  ,5.81234586e-02 ,-1.98743894e-01  ,1.17804827e-01 ,-4.25389989e-02],
 [-1.51419417e-01  ,2.26712270e-01  ,1.09288449e-01 ,-2.84904897e-01  ,2.27818263e-01 ,-3.07658953e-02 ,-3.27887176e-03  ,5.41411823e-02 ,-3.04545267e-02 ,-4.87841977e-02 ,-1.60084576e-01  ,1.57417509e-01 ,-1.21845164e-01 ,-2.17575499e-01 ,-3.34611894e-01  ,2.94491678e-01  ,4.44174705e-02 ,-1.35565032e-01 ,-1.78769105e-01  ,1.96477314e-02 ,-5.49409281e-02  ,4.06308587e-02 ,-1.08176504e-01 ,-8.32036565e-02 ,-3.26591571e-01 ,-2.12617252e-01  ,3.32200613e-01 ,-4.21470601e-02  ,3.67529762e-02  ,8.29072717e-02 ,-3.29344696e-01 ,-7.41282736e-02],
 [-1.90614204e-01  ,4.80165865e-02 ,-1.46455439e-01 ,-2.00212605e-02  ,1.08417949e-01  ,3.84643426e-01  ,1.49913569e-01  ,9.53117837e-02  ,1.35845453e-01  ,2.52940903e-01  ,3.01940389e-01 ,-9.09925159e-02 ,-2.85093708e-02  ,3.07495715e-01 ,-4.81103115e-02  ,1.06383950e-01 ,-9.17699520e-03 ,-2.03086464e-01  ,7.52558340e-02 ,-2.92877142e-02 ,-1.92239227e-01 ,-1.55464710e-01  ,8.43846798e-03 ,-3.85130056e-01  ,2.65520136e-01 ,-1.70493109e-01  ,1.66120837e-01  ,8.59666511e-02  ,3.43887880e-02  ,2.09780352e-01  ,8.63801442e-02 ,-1.13091229e-01],
 [-1.89665442e-01  ,2.64171617e-01  ,1.60426482e-01  ,1.56994328e-01 ,-1.31135765e-01 ,-1.78176170e-01  ,1.17266808e-02 ,-1.22294638e-01  ,2.60552161e-02  ,2.77576203e-01 ,-7.21504529e-02 ,-8.89197062e-02 ,-5.59673392e-02 ,-1.77437616e-01 ,-2.39946045e-02 ,-1.10921469e-01  ,5.23071443e-02  ,2.35116310e-02  ,1.62094478e-01  ,1.23490544e-01  ,2.21077338e-01 ,-3.94406519e-01  ,1.38221511e-01  ,5.91552511e-02 ,-1.52719633e-01  ,8.55377788e-02 ,-5.24404856e-02  ,2.68812696e-01 ,-1.36760988e-01  ,4.63210991e-01  ,2.45571136e-02 ,-1.73531505e-01],
 [-1.74323758e-01  ,3.06248187e-01 ,-5.75528457e-02  ,6.76920353e-02  ,1.39982936e-01  ,9.34818883e-02 ,-6.48555545e-02 ,-2.09833083e-01 ,-2.26444758e-01  ,9.14125958e-02 ,-2.79854865e-02 ,-1.35138048e-01 ,-2.77899629e-01  ,1.76830938e-03  ,3.47809186e-01 ,-1.20578559e-01 ,-1.37118210e-01 ,-2.08643233e-01 ,-6.20207951e-02 ,-1.56801751e-01 ,-1.95622582e-01 ,-3.69470917e-03  ,2.45713934e-01 ,-4.89553050e-02 ,-1.94064213e-01 ,-4.87887125e-02 ,-2.76717095e-01 ,-2.59406405e-01 ,-5.57744535e-02 ,-2.52454124e-01 ,-1.25946066e-01 ,-2.03729256e-01],
 [-1.79203189e-01  ,2.03806017e-01 ,-7.73288078e-02  ,2.50998769e-01  ,5.36899056e-02 ,-6.34725612e-02 ,-1.57651374e-01 ,-2.72189267e-01  ,1.41945706e-01  ,2.63961260e-01 ,-7.49848287e-02  ,1.10437326e-02 ,-7.56213596e-03  ,3.84726682e-01 ,-9.15238605e-02 ,-9.00828549e-02 ,-5.09179892e-02 ,-1.60183851e-01  ,8.16482548e-02  ,3.05587600e-01  ,1.24215663e-01  ,3.07924961e-01 ,-1.53897738e-01  ,2.20174237e-01  ,9.31927125e-03  ,1.63403877e-01  ,2.69463092e-01 ,-1.23929305e-02  ,1.71275421e-01 ,-1.34784194e-01 ,-1.13110878e-01  ,1.44314674e-01],
 [-1.75116081e-01 ,-2.18559331e-01  ,1.10282011e-01  ,1.36535114e-01  ,6.20032654e-02  ,3.37699869e-02  ,9.98178844e-03  ,4.66160600e-01  ,2.76552405e-02 ,-3.75146726e-02  ,5.42843387e-04 ,-1.96106708e-01 ,-3.02513660e-01 ,-1.85547429e-01 ,-1.38200840e-01 ,-2.14199248e-01  ,7.78388232e-03 ,-2.89624071e-01 ,-5.39348129e-02  ,3.41038381e-01 ,-2.05492868e-01 ,-2.51076374e-01 ,-1.60588178e-02  ,1.90603087e-01  ,5.25835878e-03  ,7.99351484e-02 ,-4.31418786e-02  ,3.14642042e-02  ,1.51070991e-01 ,-1.89416320e-01  ,1.78016422e-02  ,1.53360057e-01],
 [-1.94007544e-01 ,-2.05180248e-01  ,1.93018719e-01  ,1.50869084e-01 ,-1.94810473e-02 ,-2.00079527e-01  ,1.32508433e-01  ,4.47974709e-02 ,-2.59303828e-01  ,3.35337792e-01  ,7.62627253e-02  ,2.91256794e-02 ,-1.83126056e-01  ,5.43020056e-02 ,-1.98077432e-01  ,4.62135747e-01  ,8.28052415e-02  ,7.49690236e-02  ,5.57014803e-02  ,1.14009156e-01  ,1.79076155e-01  ,2.00700272e-01  ,2.98812918e-02 ,-1.25088704e-01  ,8.52651759e-02 ,-1.23441824e-01 ,-3.25674523e-01 ,-1.17353367e-01 ,-1.83080971e-01 ,-1.40391431e-01  ,7.16113000e-02  ,8.03650742e-02],
 [-1.66081961e-01  ,8.76723930e-02 ,-2.72539095e-01 ,-1.96829297e-01 ,-3.06978974e-01 ,-2.28827924e-02 ,-4.81130897e-02 ,-5.52912727e-02  ,1.39338351e-01  ,4.69073964e-03 ,-4.58883665e-02  ,1.45806898e-01  ,4.14763685e-02 ,-4.35130260e-02 ,-1.37375980e-01  ,1.88039279e-01  ,3.53532415e-02 ,-2.79981631e-01  ,1.02306815e-01 ,-1.94886277e-01  ,3.16087827e-02 ,-2.32934107e-01 ,-3.98353263e-01  ,2.55073379e-01  ,1.89326568e-01  ,4.14601618e-02 ,-3.82241515e-01 ,-1.08269141e-01  ,1.37575477e-01 ,-6.45602210e-02 ,-7.27288384e-02 ,-1.41637747e-01],
 [-2.11008264e-01  ,3.64075324e-02  ,2.33641321e-02 ,-2.59471223e-01 ,-2.09243392e-01 ,-1.25234846e-01  ,8.97258226e-02 ,-7.74114893e-02  ,7.22035653e-03 ,-1.10354889e-01 ,-6.91739546e-02 ,-3.69833469e-01  ,3.94343758e-01  ,1.05857947e-01  ,1.10333103e-01  ,1.51486888e-01 ,-2.55227283e-01 ,-7.29289749e-02 ,-2.28898591e-01  ,2.77592737e-01  ,1.03615181e-01 ,-9.61584735e-02  ,8.09046667e-02 ,-2.27276613e-01 ,-1.96887047e-01 ,-8.27875787e-02 ,-1.16445533e-01  ,3.53629619e-02  ,2.55748295e-01 ,-7.77444828e-02  ,1.20852290e-01  ,1.80450822e-01],
 [-1.33471673e-01  ,1.82027227e-01 ,-1.12760146e-01 ,-2.23416245e-01  ,2.95783111e-01  ,1.88420780e-01 ,-1.09443081e-01  ,2.37273267e-01 ,-7.22760557e-02 ,-4.30635391e-02 ,-2.52331761e-01  ,1.44143469e-01  ,6.89226419e-02  ,7.82272400e-02 ,-2.23136428e-01  ,9.24866772e-02 ,-1.78103648e-01  ,2.46969112e-01  ,1.63961675e-01  ,1.26304701e-01  ,8.10014761e-02  ,2.14385729e-02  ,3.25097573e-01  ,1.16322199e-01  ,9.78723902e-02  ,2.88843832e-01 ,-1.11963736e-01 ,-6.67758089e-02  ,1.16697035e-01 ,-2.89929975e-02  ,3.18674962e-01 ,-2.15885601e-01],
 [-1.76218649e-01  ,1.55023281e-01 ,-6.71205280e-02  ,8.62361333e-02 ,-2.39020201e-02  ,1.08384389e-01  ,2.30276767e-01 ,-1.46343098e-01 ,-7.56872669e-02 ,-4.26093863e-01  ,1.90999303e-01 ,-2.64198965e-01 ,-2.24145320e-01 ,-5.18752269e-03 ,-1.74680211e-01  ,1.97081331e-01 ,-5.83340582e-02  ,1.18568385e-01  ,2.86671646e-01 ,-2.40575335e-01 ,-1.15469686e-02  ,4.01582082e-02  ,9.35359718e-02  ,7.85072459e-02 ,-2.90236664e-02  ,2.48476464e-01  ,1.84578246e-03  ,1.23535403e-01  ,4.45023172e-02  ,7.72884795e-02 ,-1.49902472e-01  ,3.88037697e-01],
 [-1.44565071e-01  ,1.65022170e-01  ,2.47304626e-01 ,-1.91917127e-01  ,2.27960852e-02  ,1.95845714e-01  ,1.30990761e-01 ,-7.28412509e-02 ,-1.97185120e-01  ,3.83110375e-02  ,3.23216134e-02  ,1.80281104e-02 ,-4.02853831e-03  ,2.50735073e-01 ,-4.58946318e-02 ,-1.52150405e-01  ,1.45046598e-01  ,1.17543427e-01 ,-3.81791597e-01 ,-1.58043873e-01  ,1.25682401e-01 ,-1.94739188e-01  ,8.33187229e-04  ,4.56064573e-01  ,1.62816348e-01 ,-2.61048570e-01  ,6.49786005e-02  ,3.98657577e-02 ,-1.37973953e-01 ,-7.55562677e-02  ,1.57986756e-01  ,2.12585025e-01],
 [-1.39372697e-01 ,-3.19693370e-01 ,-1.49736510e-01 ,-1.94569915e-01  ,2.46732048e-01 ,-9.42494532e-02  ,1.87038439e-01 ,-9.30216803e-02 ,-1.77036549e-03 ,-7.64226745e-02 ,-2.73093872e-01 ,-8.49424616e-03  ,6.15002847e-02  ,2.40765297e-01 ,-1.25222626e-01 ,-3.06189012e-01  ,2.74242854e-01 ,-3.20367651e-01  ,1.53640029e-01 ,-1.20994689e-01  ,5.75143472e-02  ,7.87337013e-02  ,1.65062565e-02 ,-8.31316893e-02 ,-2.59230907e-01  ,4.34072375e-02 ,-1.42833310e-01 ,-9.41904683e-02 ,-2.19760610e-01  ,2.01360386e-01  ,1.23962717e-01  ,1.32939585e-01],
 [-1.59893786e-01  ,9.91306347e-02 ,-7.40415422e-02  ,3.92495565e-01  ,1.69006126e-01 ,-6.13650809e-02  ,6.91230158e-02  ,3.21243876e-01 ,-6.08188889e-02 ,-1.49531228e-01 ,-8.02922989e-02 ,-2.36549220e-02  ,3.61547066e-01 ,-5.85601143e-03  ,4.52543675e-02  ,4.88038843e-02 ,-3.24496595e-01 ,-1.61716858e-01 ,-2.25249791e-01 ,-9.76031765e-02 ,-1.77142624e-02  ,2.04035256e-01 ,-8.30785928e-02  ,1.61417515e-01  ,1.48925657e-01 ,-6.14023344e-02 ,-1.23905357e-01  ,2.96296357e-02 ,-2.77423049e-01  ,2.91201562e-01 ,-1.58930404e-01 ,-2.65730637e-02],
 [-1.77607154e-01 ,-3.92360275e-02  ,4.00328634e-01 ,-2.34281661e-01 ,-7.83154370e-02  ,1.08595805e-01  ,3.14925754e-02  ,1.41987515e-01  ,6.27290461e-02  ,2.94676056e-02  ,8.65861511e-02 ,-4.13667338e-02  ,2.26500057e-01  ,1.45482145e-01  ,7.40169638e-02 ,-7.63692507e-02  ,5.20074868e-02  ,4.44543546e-02  ,2.92200669e-01 ,-3.17528990e-02 ,-1.84859111e-01  ,2.25508726e-01 ,-6.90515697e-02  ,8.83071938e-02 ,-1.30047935e-01  ,7.38633647e-02 ,-1.15112150e-01  ,4.11064992e-01 ,-1.45805929e-01 ,-2.47428401e-01 ,-2.66563302e-01 ,-2.60966486e-01],
 [-2.16111723e-01 ,-3.35021640e-01  ,7.98305870e-02 ,-4.88188663e-02 ,-6.39842567e-02 ,-2.07365310e-01 ,-1.99638652e-02 ,-2.60719198e-01 ,-3.36596053e-02 ,-1.24604437e-01  ,2.02776973e-01  ,8.32659296e-02 ,-1.83461484e-01  ,5.00587535e-02 ,-5.12743902e-03  ,7.22571478e-02 ,-3.45740385e-01 ,-4.67433198e-03 ,-5.93290930e-02 ,-2.53869686e-02 ,-3.10305468e-01  ,1.09168859e-01 ,-4.43670543e-02  ,2.69186672e-01 ,-1.12994654e-01 ,-3.21157258e-02  ,1.60100903e-01  ,1.13973709e-02  ,5.90698918e-02  ,2.18486596e-01  ,3.55884610e-01 ,-2.94804066e-01],
 [-1.59216361e-01 ,-2.13792602e-01 ,-8.91522231e-02  ,8.70514809e-02  ,1.81346439e-01  ,1.75677312e-01  ,9.42497648e-02 ,-1.02016327e-01  ,1.65959560e-01  ,3.14891470e-01 ,-4.10006326e-01 ,-2.61768596e-01  ,5.34449373e-02 ,-2.82287694e-01  ,2.34126614e-01  ,2.69512003e-01  ,5.30609135e-02  ,1.36255811e-01 ,-7.02352117e-02 ,-2.68075968e-01 ,-8.54493006e-02 ,-1.92481627e-02 ,-1.53375979e-01  ,9.91278243e-02 ,-2.05447253e-02  ,1.38419115e-01  ,1.76142788e-01  ,1.54135056e-01  ,2.99812092e-03 ,-1.36791978e-01  ,1.47271349e-01  ,5.54831261e-02]]
)

Vwm = np.array(
[[-1.07801351e-01 ,-1.62989079e-01 ,-2.47504715e-01 ,-1.91390040e-01 ,-2.26149919e-01 ,-1.56860972e-01 ,-2.08930485e-01 ,-1.35248018e-01 ,-1.93700628e-01 ,-1.07170100e-01 ,-1.41582287e-01 ,-2.04331997e-01 ,-1.65237370e-01 ,-1.72813889e-01 ,-1.48589744e-01 ,-1.65920172e-01 ,-2.29499293e-01 ,-1.94101463e-01 ,-2.18371434e-01 ,-1.59149646e-01 ,-1.76558979e-01 ,-1.73982593e-01 ,-1.98932046e-01 ,-1.39999908e-01 ,-1.95765103e-01 ,-1.43445399e-01 ,-1.88965755e-01 ,-1.34121599e-01 ,-1.32544789e-01 ,-1.93696308e-01 ,-1.84946175e-01 ,-1.50953716e-01],
 [-2.05898522e-01  ,6.35147973e-02  ,8.91327114e-02  ,1.44651522e-01  ,3.33239322e-01 ,-1.66949907e-01 ,-1.27730848e-01 ,-2.98306228e-01 ,-7.79201862e-02  ,1.21920451e-03  ,1.08850441e-01 ,-1.11564200e-01 ,-2.07611396e-02  ,8.36854683e-02 ,-1.69946423e-01  ,3.20195555e-01  ,2.45673772e-01 ,-1.79603261e-01  ,4.55612768e-02 ,-1.29693895e-01 ,-2.68787000e-01 ,-2.83037283e-01  ,9.91611610e-02  ,5.53635910e-02  ,1.55346100e-01  ,1.10910791e-01  ,8.43370208e-02 ,-2.79925748e-01  ,8.95921905e-02  ,1.77827280e-01 ,-4.95321040e-02 ,-2.65517962e-01],
 [ 1.79496435e-01 ,-1.35674488e-01  ,1.69310536e-01 ,-1.95328721e-01 ,-1.34321415e-02  ,1.48508526e-01  ,1.03350912e-01 ,-1.67319290e-01  ,8.21847721e-02 ,-6.11777049e-02 ,-2.37372801e-01 ,-7.42110516e-02 ,-2.54324631e-01 ,-2.01229287e-01 ,-1.53541371e-01 ,-3.24129956e-01  ,7.91978700e-02 ,-1.54527714e-01  ,1.44933091e-01 ,-3.78139528e-02  ,1.06506870e-01 ,-1.95971012e-01  ,2.82724506e-01 ,-9.51300972e-03  ,3.57546803e-02  ,8.23487476e-02  ,2.25310658e-01  ,2.35848465e-01  ,3.58550906e-01  ,1.58393051e-01 ,-2.51554651e-01 ,-4.18039411e-02],
 [-1.66813586e-01  ,2.36266648e-01 ,-1.37440685e-01  ,2.04207116e-01 ,-8.56600746e-02  ,1.05727699e-01 ,-5.72173887e-02 ,-9.65487545e-03 ,-3.06057489e-01 ,-4.02943248e-02 ,-1.20090977e-01  ,2.07991711e-01 ,-2.93385997e-01  ,3.39045083e-02 ,-2.21574144e-01  ,4.17143565e-02 ,-1.25124407e-01 ,-2.51119775e-02 ,-1.65792776e-01  ,5.91655160e-02 ,-1.82041257e-01  ,1.23708531e-01 ,-3.15788137e-02 ,-4.06487466e-01  ,2.79628893e-01  ,5.46502478e-02  ,1.51739745e-01  ,1.68006262e-01  ,2.06010946e-01  ,8.57572437e-02  ,2.01886787e-01  ,2.40646555e-01],
 [ 7.39892971e-02  ,1.18014481e-01 ,-1.21154497e-01 ,-2.45152768e-01 ,-1.19066071e-02  ,6.03501439e-02 ,-1.41382356e-01  ,2.06375592e-01  ,1.03079737e-01  ,2.33215225e-01  ,1.50300981e-01  ,1.15306097e-01 ,-2.39185521e-03  ,8.31144783e-03 ,-1.04131930e-02 ,-8.26294862e-02  ,1.67156900e-02 ,-3.30738553e-01 ,-3.73250528e-01 ,-1.09978787e-01  ,8.42375637e-03 ,-3.21215570e-02  ,5.99582234e-03  ,2.88132556e-01  ,3.97218726e-01  ,2.36561402e-01 ,-1.81892093e-01 ,-3.22075451e-02 ,-8.08881066e-02  ,1.77011768e-01 ,-2.18342467e-01  ,2.29981007e-01],
 [-5.64664609e-02 ,-4.71068185e-02  ,1.48329331e-01 ,-9.27518599e-02  ,1.11435358e-01 ,-3.69841795e-01  ,4.20785669e-03  ,3.45780894e-03  ,1.09067531e-01 ,-3.20349384e-01  ,2.59955666e-01  ,7.75425629e-02 ,-1.12802297e-03  ,1.27220008e-01 ,-9.43284593e-02 ,-1.55307571e-01 ,-1.44189332e-01 ,-2.30032115e-01 ,-1.01657502e-01  ,4.02370998e-01  ,1.04663270e-01 ,-5.86782930e-02 ,-1.09316554e-01  ,1.40543934e-02  ,1.19098905e-01 ,-4.31519100e-01  ,1.94890655e-01  ,9.77558897e-02 ,-8.78714373e-02  ,2.17254507e-01  ,2.50672039e-02  ,3.84116902e-02],
 [ 1.30875755e-01 ,-7.52771147e-03 ,-2.82900041e-01  ,1.26254092e-01 ,-2.05866518e-01 ,-2.66848591e-01  ,7.36906424e-02 ,-1.92170188e-01  ,1.01199014e-01  ,1.34621858e-01 ,-1.58706105e-03  ,4.22205907e-01 ,-1.25641718e-01 ,-2.45348535e-01  ,3.46350538e-01  ,5.45354050e-02 ,-2.05472022e-01 ,-2.88286570e-02  ,2.05853952e-01 ,-1.24403394e-01 ,-1.42375930e-01  ,5.15236379e-02 ,-7.92390094e-02  ,1.41662012e-01 ,-5.17978256e-02 ,-3.86890450e-02  ,2.03558762e-01 ,-1.36099651e-01  ,4.46062896e-02  ,3.21081225e-01 ,-5.57609326e-02 ,-5.33717264e-02],
 [-4.14129120e-02  ,1.32511783e-01 ,-1.39108385e-02 ,-1.18664343e-01  ,2.28566043e-01  ,8.92277853e-02 ,-8.41726091e-02 ,-1.99489301e-01 ,-7.62627384e-02  ,4.66006024e-01 ,-1.65427004e-01 ,-2.07358047e-01 ,-1.19303626e-01 ,-1.29185287e-01 ,-6.25662794e-02  ,4.43291973e-02 ,-5.28637973e-02  ,1.35355766e-01  ,5.81095245e-02  ,3.43080726e-01  ,5.63333093e-02  ,1.85144270e-01 ,-2.57753069e-01  ,8.44221400e-02 ,-2.90339969e-02 ,-1.86558220e-01 ,-2.78758278e-01  ,1.55291579e-01  ,2.02637070e-02  ,3.42800545e-01 ,-2.79008247e-02 ,-1.40856669e-01],
 [ 1.74927292e-01  ,3.16668286e-01 ,-2.22981786e-01 ,-6.14240207e-02  ,4.58208370e-02 ,-6.93548628e-03  ,4.90708714e-01 ,-2.25303259e-03  ,4.20083478e-01 ,-1.28714405e-01 ,-9.51040284e-02 ,-2.37565739e-01 ,-2.29117970e-01  ,2.75601869e-01 ,-1.47165277e-02  ,7.95353724e-02 ,-4.59809493e-02  ,5.23679713e-02  ,1.69771600e-03  ,1.93245613e-02 ,-1.93699645e-01 ,-1.55806894e-01 ,-2.26008417e-01 ,-5.18818103e-02  ,3.55561387e-02 ,-2.77368022e-02 ,-1.12938334e-01 ,-1.13133331e-01  ,1.18569088e-01 ,-6.97849663e-02 ,-6.73961293e-02  ,8.54867119e-02],
 [-2.80889567e-01 ,-1.98818558e-01  ,4.63383028e-02 ,-1.36368993e-01 ,-5.26821166e-02  ,6.74874212e-02  ,2.93536176e-01  ,2.04337151e-01 ,-2.57896978e-01 ,-8.52310050e-02  ,1.35225756e-01  ,8.55602226e-02 ,-3.52642376e-01  ,2.61135639e-01  ,1.31517162e-01  ,3.93090747e-02  ,4.32139295e-03  ,1.57980561e-01 ,-1.40904122e-01 ,-5.17761049e-03  ,1.82050401e-01  ,8.67521904e-02 ,-1.89005010e-01  ,6.20478764e-02 ,-3.56205164e-02  ,2.56140383e-01  ,9.69961890e-02 ,-1.45973309e-02 ,-3.70441614e-03  ,1.56893665e-01 ,-2.00287349e-01 ,-3.85315907e-01],
 [-1.57242964e-02  ,3.28658841e-01  ,8.04059376e-02 ,-4.61870030e-01  ,1.71324485e-01 ,-2.87280440e-02 ,-1.04935027e-01 ,-8.62488330e-02 ,-1.68435942e-01 ,-2.26028242e-01 ,-3.24668670e-01  ,1.09713531e-02 ,-1.20024839e-01  ,1.88002854e-01  ,2.34537689e-01  ,3.56414869e-02 ,-8.49551659e-02 ,-7.40639473e-02 ,-6.37461075e-03 ,-1.83372631e-01 ,-6.23926362e-02  ,2.59215985e-01  ,2.45770188e-01  ,2.40072598e-01 ,-1.07419975e-01 ,-8.40878920e-02  ,1.02483337e-01 ,-4.82041656e-02 ,-1.00464514e-01 ,-4.10474530e-03  ,2.34748562e-01  ,1.24450377e-02],
 [ 5.27599515e-02 ,-2.64541477e-02 ,-1.21586784e-01 ,-1.98434215e-01 ,-2.80395566e-01 ,-1.05704843e-03  ,1.33863903e-02  ,7.04423504e-02  ,6.45553685e-02  ,1.58443751e-01  ,2.80178614e-01 ,-2.13326575e-01  ,1.32566512e-01  ,1.03086781e-01 ,-2.12337681e-01 ,-1.15747398e-01  ,2.99522977e-01 ,-4.84747203e-03  ,3.03714127e-03 ,-7.68662431e-02 ,-4.44736400e-01  ,4.08256414e-01  ,4.86871186e-03  ,1.29147945e-02 ,-8.87486918e-02 ,-1.04958421e-01  ,2.99309094e-01  ,1.18675091e-01  ,6.51049671e-02  ,8.28492999e-02  ,5.17131491e-02 ,-1.48252196e-01],
 [ 1.07070210e-02 ,-3.38320625e-01 ,-1.93468983e-01  ,1.53188892e-01  ,6.50406297e-02 ,-1.06833684e-01  ,3.10631771e-02 ,-1.15941909e-02 ,-2.22879252e-02 ,-1.43011154e-01 ,-7.51677149e-02  ,1.47800831e-02 ,-2.09055020e-01 ,-7.48849038e-02  ,1.60665851e-01  ,1.57859780e-01  ,2.73861060e-01 ,-1.42655062e-01 ,-2.51722229e-01  ,3.35253062e-01 ,-1.87791693e-01  ,1.17997641e-01  ,1.37014111e-01  ,3.36046145e-01 ,-1.42401337e-01  ,2.96665085e-02 ,-2.12798100e-01  ,1.55865034e-01  ,2.82790472e-01 ,-1.77604212e-01  ,1.25991552e-01  ,1.03927693e-01],
 [ 9.49067006e-03  ,2.05174904e-01  ,1.20055718e-01 ,-3.56348114e-02 ,-2.61199669e-02  ,3.11236306e-01 ,-1.13152196e-01  ,4.90908141e-02  ,2.29182944e-01  ,8.22683639e-02  ,1.99856692e-01  ,7.87044732e-02 ,-1.03588183e-01 ,-2.27460121e-01  ,2.78780060e-02  ,9.74324024e-02 ,-4.10359935e-02 ,-2.27285424e-01 ,-2.86000423e-01 ,-6.59391446e-03  ,2.25973383e-01 ,-2.83971579e-02 ,-1.56907945e-01 ,-1.63967130e-02 ,-2.29036114e-01 ,-1.23074522e-01  ,1.59064818e-01 ,-2.41738298e-01  ,3.46405441e-01 ,-1.38508365e-01  ,2.93782916e-01 ,-2.49844388e-01],
 [ 3.41833147e-01  ,1.87140171e-01 ,-2.80694874e-01  ,1.03883160e-01 ,-1.33548477e-01 ,-4.85087483e-02 ,-3.73437146e-01 ,-2.11617581e-01 ,-1.30544147e-02 ,-3.98290824e-02  ,1.10882863e-02  ,4.31646220e-02  ,8.87957598e-02  ,4.30775492e-01  ,1.03210669e-01 ,-4.67936792e-02  ,9.72689359e-02  ,1.70025960e-01 ,-2.26349418e-01  ,8.73838309e-02  ,2.05159747e-01 ,-2.05173317e-01  ,7.79687578e-02 ,-5.68635734e-02 ,-1.15044300e-01  ,7.88530373e-02  ,3.18598638e-02  ,2.36287900e-01  ,6.34615152e-02  ,6.85819813e-02 ,-6.11169397e-02 ,-2.54124195e-01],
 [-1.86298255e-01 ,-1.36289203e-01  ,7.53722950e-02 ,-2.32618804e-01 ,-6.86992193e-02 ,-2.06628356e-01  ,5.15213821e-02 ,-4.28001697e-02  ,2.62579250e-01  ,1.15598061e-01  ,8.18747489e-02 ,-1.11526816e-01  ,6.51330666e-02 ,-6.72872441e-02  ,2.67543690e-01 ,-2.58884039e-02 ,-2.30846878e-01  ,8.87262418e-02 ,-1.00802296e-01 ,-1.30040361e-02 ,-1.34208654e-01 ,-1.38954681e-01  ,2.25787068e-01 ,-2.70200569e-01  ,2.15000753e-01  ,2.13490277e-01 ,-2.02689179e-01  ,2.34165266e-01  ,6.62426437e-02  ,5.18408643e-02  ,4.11425425e-01 ,-2.35976398e-01],
 [-6.13361293e-02 ,-1.12492618e-01 ,-1.94802770e-01  ,1.75802053e-01  ,1.61563720e-01  ,2.31267867e-01  ,3.20747495e-03 ,-5.61679972e-02 ,-8.70137108e-02  ,1.90258611e-01  ,3.93980309e-01 ,-1.46222530e-01 ,-2.56261500e-01  ,2.08863829e-01  ,6.40466727e-02 ,-1.76526630e-01 ,-3.32530501e-01  ,9.18202287e-02  ,7.44108095e-02 ,-1.57530786e-01  ,1.06685891e-03 ,-3.68747240e-02  ,3.88844052e-01  ,1.50452042e-01  ,5.29533763e-02 ,-3.42993500e-01 ,-3.82543222e-02 ,-4.66798840e-02  ,6.28787167e-02 ,-9.95298326e-02 ,-8.07162671e-03  ,6.68895699e-02],
 [-2.21886912e-01  ,3.53653747e-02 ,-1.22086075e-01 ,-9.07685146e-02 ,-2.45410804e-01  ,5.37465986e-02 ,-3.43466992e-01  ,4.10524231e-01  ,1.07573545e-01 ,-6.47666813e-02 ,-1.26183123e-01 ,-1.67961030e-01 ,-1.76573487e-01 ,-8.21650490e-02  ,7.47908535e-02  ,2.16744035e-02  ,1.54447649e-01  ,3.13630628e-01  ,1.56593425e-01  ,2.35808339e-01 ,-4.88969347e-02 ,-3.14231640e-01  ,1.15361486e-01  ,9.86510531e-02  ,4.56345049e-02 ,-9.13888521e-02  ,1.28601890e-01 ,-2.51893863e-01  ,7.47508462e-03  ,1.97151598e-01  ,6.40230606e-02  ,1.13573860e-01],
 [ 6.37565685e-02 ,-1.99574098e-01  ,9.06002812e-02  ,1.45583241e-01 ,-1.01857333e-01  ,4.46262296e-01  ,4.14504506e-02  ,1.75501641e-02  ,8.29410602e-03 ,-3.78428343e-02 ,-2.63084548e-01 ,-9.24743955e-02  ,1.25302632e-01  ,7.56825597e-02  ,3.65812177e-01  ,2.02125890e-01  ,3.47821651e-02 ,-2.19822580e-01 ,-1.25128382e-01 ,-4.12002361e-02 ,-1.89471049e-01 ,-1.01546632e-01 ,-9.26484601e-02 ,-5.84467366e-02  ,2.70911894e-01 ,-3.48622987e-01  ,1.26070236e-01  ,1.51670462e-01 ,-2.09611690e-01  ,8.93816702e-02 ,-6.82181649e-02 ,-1.55812608e-01],
 [ 4.82759961e-01 ,-3.33065686e-02  ,5.85375024e-02 ,-2.69786062e-01 ,-2.25581051e-04  ,1.17124668e-02  ,1.17745358e-01  ,8.87611342e-02 ,-3.80929352e-01  ,1.01545295e-01  ,8.60772210e-02  ,2.47902791e-01 ,-3.49012451e-02 ,-6.15236287e-02 ,-1.11164702e-01  ,2.25706852e-02  ,9.13042525e-03  ,1.40091994e-01  ,1.12226627e-01  ,2.13072236e-01 ,-1.93610748e-01 ,-2.54509786e-01 ,-3.52448632e-02  ,7.63589765e-02  ,2.68161765e-01 ,-8.20903190e-02 ,-3.56397464e-02 ,-1.29394769e-01 ,-9.97856098e-04 ,-2.57381268e-01  ,1.79714133e-01 ,-2.08196081e-01],
 [-6.92190383e-02 ,-2.18518041e-01  ,6.44229307e-02  ,6.55117923e-02  ,6.55547381e-02 ,-5.94327343e-02 ,-1.19929804e-01  ,2.53553480e-01  ,5.87923900e-02  ,3.68957370e-02 ,-3.18613395e-01  ,1.88492215e-01  ,2.63291045e-01  ,3.44396875e-01 ,-1.78863192e-01 ,-1.56579906e-01 ,-2.04210767e-01  ,1.66057554e-02  ,7.48199169e-02 ,-2.10641216e-01 ,-9.76810025e-02 ,-3.81131439e-03 ,-2.01232764e-01  ,1.82546321e-01  ,2.35960923e-02 ,-1.15189596e-01 ,-1.49003078e-01 ,-5.82474043e-02  ,4.76186944e-01  ,8.90830291e-02  ,8.62454185e-02 ,-9.66662444e-02],
 [-1.72021488e-02  ,2.23147269e-01 ,-2.35433686e-01  ,1.68406120e-01  ,1.78521283e-01 ,-1.93994934e-01  ,1.12067718e-01  ,3.96839611e-01 ,-2.63867288e-01  ,1.48142560e-01 ,-3.83646676e-02 ,-2.90083901e-01  ,9.13470856e-02 ,-9.99712241e-02  ,1.40064647e-01 ,-1.07931900e-01 ,-5.43439444e-02 ,-3.30487022e-01  ,1.65725302e-01 ,-3.04366878e-02  ,7.50134381e-02 ,-2.02790699e-01 ,-1.00767866e-01  ,1.04282462e-01 ,-8.02292413e-02  ,1.10187745e-01  ,2.31390118e-01  ,2.90405355e-01  ,1.27120561e-02 ,-7.64197294e-02  ,1.28222119e-01 ,-1.11950427e-01],
 [-7.59549503e-02  ,5.11464877e-02 ,-1.59067272e-01 ,-1.11958181e-01  ,3.67332287e-02 ,-7.39425475e-02  ,1.11998559e-01  ,2.16995981e-01  ,1.11251754e-01  ,9.74099610e-02 ,-1.42300444e-01  ,1.39987226e-01  ,1.66593632e-01 ,-1.00747184e-01 ,-2.90801179e-01  ,4.87763293e-01 ,-2.70702666e-01  ,7.64833407e-02 ,-1.59876140e-01  ,9.20243134e-02  ,2.87778403e-02  ,2.12066136e-02  ,3.86266742e-01 ,-1.13196153e-02 ,-8.41732473e-02 ,-1.31851460e-01  ,1.36597212e-01  ,1.39159129e-01  ,3.11821704e-03 ,-9.83310386e-02 ,-3.19250888e-01 ,-1.65458306e-01],
 [-4.97504196e-02  ,5.81882821e-02 ,-5.98078446e-02 ,-1.66800325e-01  ,3.32727999e-01  ,4.79631971e-02 ,-9.89223759e-02  ,2.24247216e-01  ,6.63523255e-02 ,-6.80129050e-02  ,1.76977872e-01  ,3.54501937e-01 ,-1.33286996e-01 ,-8.79242818e-02  ,1.00539766e-01  ,5.00465908e-03  ,3.14708797e-01  ,5.63264851e-02  ,9.70414905e-02 ,-2.73392018e-01 ,-1.55921775e-01 ,-1.61075923e-01 ,-6.92223142e-02 ,-2.66429302e-01 ,-2.23008599e-01 ,-2.37251221e-01 ,-2.31667228e-01  ,3.18053392e-01 ,-1.32902553e-02  ,5.79538969e-02 ,-1.04090744e-01  ,1.95338314e-02],
 [ 3.13659281e-02 ,-1.41467577e-01  ,9.13806271e-02 ,-8.60133835e-02 ,-2.54732065e-02 ,-1.99047296e-01 ,-3.38883658e-01 ,-3.83396386e-02  ,1.98076350e-01  ,1.17781848e-01  ,1.89947494e-02 ,-8.24983024e-02 ,-3.25198649e-01  ,8.85269917e-02  ,9.59829762e-03  ,3.03560629e-01 ,-1.89296773e-02  ,2.82008308e-02  ,2.29436323e-01 ,-1.57589931e-01  ,1.53045309e-01  ,1.12373199e-01 ,-2.73238744e-01  ,6.92182477e-02  ,2.79675797e-01 ,-4.57810980e-03  ,1.94993060e-01  ,2.49593864e-01  ,3.38725182e-02 ,-3.99044795e-01 ,-6.49079068e-02  ,5.72819174e-02],
 [ 2.55214358e-01 ,-1.59148520e-02  ,4.48574565e-01  ,7.33663995e-02  ,1.30216269e-01 ,-6.10500904e-02 ,-1.64454360e-01  ,1.45132533e-01 ,-5.67785385e-02  ,1.06035702e-01  ,8.74490339e-02 ,-1.35750180e-01 ,-7.70777115e-02  ,3.97216481e-02  ,1.78282353e-01  ,5.36709696e-02 ,-3.07973267e-01  ,1.15515928e-01 ,-2.04041874e-01  ,8.20362288e-02 ,-3.88469344e-01 ,-6.43466912e-02 ,-5.48348939e-02 ,-6.94246231e-02 ,-3.14806975e-01  ,1.87743408e-01  ,1.53429752e-01  ,6.57792086e-03  ,5.83530586e-02  ,7.04103414e-02 ,-2.09427161e-01  ,2.16573910e-01],
 [-2.85356748e-01  ,1.40456544e-01  ,1.39645519e-01  ,1.01814760e-01 ,-1.37014287e-01  ,1.92506527e-01  ,2.05744223e-02 ,-1.60401999e-01  ,1.86346772e-01  ,9.24011556e-02 ,-3.62437931e-02  ,2.74186664e-01 ,-8.98102606e-02  ,8.48708154e-02 ,-2.20690454e-01 ,-1.51161747e-01 ,-8.28674531e-02 ,-1.60223877e-03  ,4.27868543e-02  ,1.05943336e-01 ,-2.45147767e-01 ,-2.62811343e-01 ,-6.56749350e-02  ,3.85396675e-01 ,-1.78439964e-01  ,1.32907788e-01  ,6.15604050e-02  ,2.88644336e-01 ,-3.15242471e-01 ,-1.58545996e-01  ,1.16820988e-01 ,-6.08836796e-02],
 [-1.33198943e-02 ,-1.99314312e-01 ,-3.60935022e-01 ,-2.64478335e-01  ,2.49999384e-01  ,3.77486784e-01 ,-1.43433314e-01 ,-1.30393059e-01  ,1.65123401e-02 ,-3.11302004e-01  ,1.80565552e-01 ,-2.60609399e-02  ,2.42134907e-01 ,-5.33652458e-02 ,-1.86294442e-02  ,1.25224332e-01 ,-2.63918949e-01 ,-7.71636473e-03  ,2.09724961e-01  ,1.46958786e-01 ,-7.77598282e-02 ,-1.42338166e-02 ,-1.98521222e-01  ,2.20865302e-02 ,-2.85286920e-02  ,2.90630712e-01  ,1.42810360e-01  ,5.58002934e-02  ,6.58262855e-02  ,6.65583594e-02  ,2.95259364e-02  ,9.72969287e-02],
 [ 3.17789890e-02  ,2.50799624e-01  ,2.82485339e-02  ,2.53570587e-01  ,1.57471330e-01  ,1.24758539e-02 ,-1.37796426e-01  ,9.49277949e-02  ,1.08069033e-01 ,-3.73747543e-01  ,3.03736293e-02 ,-5.24940194e-02  ,4.92851815e-04 ,-3.40071334e-01  ,3.86051708e-02 ,-2.47118309e-01 ,-8.61823054e-02  ,2.71357665e-01 ,-8.21121687e-02 ,-2.62962344e-02 ,-1.60195884e-01  ,2.52536455e-01 ,-2.19674217e-02  ,1.68190854e-01  ,3.04683903e-01  ,2.98446535e-02 ,-6.07115267e-02  ,5.58259511e-02  ,2.35632577e-02 ,-1.10147335e-01 ,-1.89717892e-01 ,-3.58999141e-01],
 [ 3.52735912e-02 ,-2.51271155e-01 ,-2.05986018e-01  ,2.19931975e-02  ,4.56235332e-01 ,-3.06020129e-02 ,-3.54516395e-02  ,3.86621847e-02  ,2.29499386e-01  ,2.43501668e-01 ,-2.66180545e-01  ,1.20588979e-01 ,-9.36278379e-02  ,4.87934562e-02 ,-1.60419855e-02 ,-3.01355840e-01  ,1.06738389e-01  ,7.42965648e-02 ,-2.01870592e-01  ,8.90167550e-02 ,-1.81225390e-02  ,8.05326804e-02  ,8.96336096e-03 ,-1.96009524e-01  ,2.05725729e-02  ,8.18770935e-02  ,3.37540317e-01 ,-2.29556361e-01 ,-2.61646295e-01 ,-1.28112691e-01  ,8.67353810e-02 ,-6.50789859e-02],
 [ 1.62645640e-01 ,-1.55163600e-01 ,-3.44929194e-02  ,3.69773482e-02  ,7.28560272e-02 ,-5.60372122e-02  ,1.28591240e-01 ,-4.51550387e-02 ,-4.62191119e-02 ,-9.93066069e-02 ,-6.69057096e-03 ,-1.49427670e-01 ,-2.38496802e-02 ,-2.06308206e-01 ,-2.36920060e-01  ,1.31909030e-01  ,1.14355910e-02  ,3.51342467e-01 ,-3.45419395e-01 ,-3.95185591e-01  ,1.26009090e-01 ,-1.60800926e-01 ,-1.30651604e-01  ,2.45668028e-01 ,-7.17737808e-03 ,-8.63497456e-02  ,1.38677712e-01  ,1.58633310e-01 ,-1.09048079e-01  ,2.57874826e-01  ,3.13515451e-01  ,1.48503485e-01],
 [ 3.38024053e-01 ,-1.20438636e-01  ,1.39515378e-02  ,1.83792650e-01 ,-2.69843455e-02  ,6.48550972e-02 ,-1.30501561e-01  ,2.55264710e-01  ,1.47048585e-01 ,-1.40324141e-01 ,-8.66521971e-03 ,-3.32686125e-02 ,-3.02344354e-01  ,6.60229157e-02 ,-2.75855058e-01  ,1.32296710e-01 ,-1.30709950e-01 ,-2.68407937e-01  ,2.15943185e-01 ,-1.91231309e-02  ,2.05205499e-02  ,1.66797682e-01  ,1.38854625e-01 ,-7.21314594e-02 ,-1.05590051e-01  ,1.44185703e-01 ,-2.28930888e-01 ,-1.94790927e-02 ,-2.92807143e-01  ,2.57244614e-01  ,2.17571533e-01 ,-2.13171975e-01]]
)

def detection(input1, input2, input3):

    if isinstance(input1, str):
        original_image = cv2.imread(input1, 0).copy()
        watermarked_image = cv2.imread(input2, 0).copy()
        attacked_image = cv2.imread(input3, 0).copy()
    else:
        original_image = input1.copy()
        watermarked_image = input2.copy()
        attacked_image = input3.copy()

    # start time
    start = time.time()

        #extract watermark from watermarked image
    watermarked_image_dummy = watermarked_image.copy()
    # Extract watermark from attacked image
    original_watermark = extraction(
        original_image, 
        watermarked_image, 
        watermarked_image_dummy,
    )
    watermark_extracted = extraction(
        original_image, 
        watermarked_image, 
        attacked_image,
    )

     # Compute similarity
    sim = similarity(original_watermark, watermark_extracted)

    # Compute threshold (only once, can be cached)
    T, _ = compute_threshold(WATERMARK_SIZE, original_watermark, N=1000)
    
    end = time.time()

    output2 = wpsnr(watermarked_image, attacked_image)
    
    # Determine watermark status
    watermark_status = 1 if sim > T and output2 > MIN_WPSNR else 0
    
    # Compute quality metric


    # print(f'[DETECTION] Time: {end - start:.2f}s')
    # print(f'[DETECTION] Similarity: {sim:.4f}, Threshold: {T:.4f}')
    # print(f'[DETECTION] Status: {"DETECTED" if watermark_status else "NOT DETECTED"}')
    # print(f'[DETECTION] wPSNR: {output2:.2f} dB')

    return watermark_status, output2


def identify_watermarked_blocks(original_image, watermarked_image, attacked_image, block_size):
    """
    Identify blocks where watermark was embedded by detecting modifications.
    
    Returns:
        list of dicts with 'locations' key containing (x, y) tuples
    """
    blocks_with_watermark = []
    difference = watermarked_image - original_image
    binary_mask = np.float64(np.zeros((512, 512)))

    for i in range(0, original_image.shape[0], block_size):
        for j in range(0, original_image.shape[1], block_size):
            block_diff = difference[i:i + block_size, j:j + block_size]
            # Block contains watermark if average difference is non-zero
            if np.mean(block_diff) > 0:
                blocks_with_watermark.append({'locations': (i, j)})
                binary_mask[i:i + block_size, j:j + block_size] = 1

    return blocks_with_watermark, binary_mask

def extract_singular_values(original_image, attacked_image, blocks, block_size, alpha):
    """
    Extract watermark singular values from selected blocks.
    
    Args:
        original_image: Original image
        attacked_image: Attacked/watermarked image
        blocks: List of block locations
        block_size: Size of each block
        alpha: Embedding strength
        
    Returns:
        extracted_S: Array of 32 extracted singular values
    """
    extracted_S = np.zeros(32)
    counts = np.zeros(32)
    
    for idx, block_info in enumerate(blocks):
        if idx >= 32:  # Only use first 32 blocks
            break
            
        x, y = block_info['locations']
        
        # Extract from attacked image
        block_attacked = attacked_image[x:x + block_size, y:y + block_size]
        coeffs_attacked = pywt.wavedec2(block_attacked, wavelet='haar', level=1)
        LL_attacked = coeffs_attacked[0]
        _, S_attacked, _ = np.linalg.svd(LL_attacked)
        
        # Extract from original image
        block_original = original_image[x:x + block_size, y:y + block_size]
        coeffs_original = pywt.wavedec2(block_original, wavelet='haar', level=1)
        LL_original = coeffs_original[0]
        _, S_original, _ = np.linalg.svd(LL_original)
        
        # Compute difference (DO NOT use abs() - preserve sign!)
        S_diff = (S_attacked - S_original) / alpha
        
        # Distribute to watermark singular values
        n_values = len(S_diff)
        start_idx = idx * n_values
        end_idx = start_idx + n_values
        
        if end_idx <= 32:
            extracted_S[start_idx:end_idx] += abs(S_diff)
            counts[start_idx:end_idx] += 1


    # Average where multiple extractions occurred
    mask = counts > 0
    extracted_S[mask] /= counts[mask]

    return extracted_S


def extraction(original_image, watermarked_image, attacked_image):

    blocks_with_watermark, binary_mask = identify_watermarked_blocks(
        original_image, 
        watermarked_image, 
        attacked_image,
        BLOCK_SIZE
    )

    attacked_image -= binary_mask.astype(np.uint8)

    # Extract singular values from each block
    extracted_S = extract_singular_values(
        original_image,
        attacked_image,
        blocks_with_watermark,
        BLOCK_SIZE,
        ALPHA
    )

    # Reconstruct watermark from singular values
    watermark_matrix = Uwm.dot(np.diag(extracted_S)).dot(Vwm)
    watermark_extracted = watermark_matrix.flatten()
    
    # Normalize and binarize
    watermark_extracted = (watermark_extracted - watermark_extracted.min()) / (
        watermark_extracted.max() - watermark_extracted.min() + 1e-10
    )
    watermark_extracted = (watermark_extracted > 0.5).astype(np.uint8)

    return watermark_extracted


def similarity(X, X_star):
    """Compute bit error rate (BER) based similarity for binary watermarks"""
    X = X.astype(np.uint8)
    X_star = X_star.astype(np.uint8)

    # Calculate number of matching bits
    matches = np.sum(X == X_star)
    total = len(X)

    # Similarity: 1.0 = perfect match, 0.0 = all bits different
    similarity_score = matches / total

    return similarity_score


def compute_threshold(mark_size, w, N=1000):
    """Compute detection threshold using Monte Carlo simulation for binary watermarks"""
    np.random.seed(42)
    SIM = np.zeros(N)

    # Convert watermark to binary
    w_binary = (w > 0.5).astype(np.uint8)

    for i in range(N):
        # Generate random binary sequence
        r = np.random.randint(0, 2, mark_size, dtype=np.uint8)
        SIM[i] = similarity(w_binary, r)

    SIMs = SIM.copy()
    SIM.sort()

    # Threshold: mean + 3*std (for binary, expected ~0.5 for random)
    mean_sim = np.mean(SIM)
    std_sim = np.std(SIM)
    T = mean_sim + 3 * std_sim

    return T, SIMs




def verify_watermark_extraction(original, watermarked, alpha, mark_path, dwt_level=1, output_prefix=""):
    """Verify that the embedded watermark can be correctly extracted."""
    print("\n" + "=" * 80)
    print("WATERMARK EXTRACTION VERIFICATION")
    print("=" * 80)

    # Load original watermark
    original_watermark = np.load(mark_path)

    # Extract watermark from watermarked image (no attack)
    extracted_watermark = extraction(original, watermarked, watermarked)
    
    # Compute similarity
    sim = similarity(original_watermark, extracted_watermark)

    # Bit statistics
    total_bits = len(original_watermark)
    matching_bits = np.sum(original_watermark == extracted_watermark)
    differing_bits = total_bits - matching_bits

    # Bit pattern analysis
    both_zero = np.sum((original_watermark == 0) & (extracted_watermark == 0))
    both_one = np.sum((original_watermark == 1) & (extracted_watermark == 1))
    orig_one_ext_zero = np.sum((original_watermark == 1) & (extracted_watermark == 0))
    orig_zero_ext_one = np.sum((original_watermark == 0) & (extracted_watermark == 1))

    print(f"\nExtraction Statistics:")
    print(f"  Total bits:        {total_bits}")
    print(f"  Matching bits:     {matching_bits} ({matching_bits/total_bits*100:.2f}%)")
    print(
        f"  Differing bits:    {differing_bits} ({differing_bits/total_bits*100:.2f}%)"
    )
    print(f"  Similarity:        {sim:.4f}")

    print(f"\nBit Pattern Distribution:")
    print(f"  Both 0:            {both_zero} ({both_zero/total_bits*100:.2f}%)")
    print(f"  Both 1:            {both_one} ({both_one/total_bits*100:.2f}%)")
    print(
        f"  Orig=1, Ext=0:     {orig_one_ext_zero} ({orig_one_ext_zero/total_bits*100:.2f}%)"
    )
    print(
        f"  Orig=0, Ext=1:     {orig_zero_ext_one} ({orig_zero_ext_one/total_bits*100:.2f}%)"
    )

    # Hamming distance
    hamming_dist = differing_bits
    normalized_hamming = hamming_dist / total_bits
    print(f"\nHamming Distance:  {hamming_dist}")
    print(f"Normalized:        {normalized_hamming:.4f}")

    # Status
    if sim >= 0.95:
        status = "EXCELLENT"
        status_symbol = "[OK]"
        bbox_color = "lightgreen"
    elif sim >= 0.7:
        status = "GOOD"
        status_symbol = "[OK]"
        bbox_color = "lightblue"
    elif sim >= 0.5:
        status = "WARNING"
        status_symbol = "[!]"
        bbox_color = "lightyellow"
    else:
        status = "ERROR"
        status_symbol = "[X]"
        bbox_color = "lightcoral"

    print(f"\nExtraction Status: {status_symbol} {status}")

    # Prepare watermark visualizations
    size = int(np.sqrt(total_bits))
    wm_orig = original_watermark.reshape(size, size)
    wm_extracted = extracted_watermark.reshape(size, size)
    error_2d = (
        (original_watermark != extracted_watermark).reshape(size, size).astype(float)
    )

    # ========== PLOT 1: Overview (Watermarks + Images) ==========
    fig1 = plt.figure(figsize=(18, 10))
    gs1 = fig1.add_gridspec(2, 4, hspace=0.25, wspace=0.25)

    # Top row: Watermarks
    ax1 = fig1.add_subplot(gs1[0, 0])
    ax1.imshow(wm_orig, cmap="binary", vmin=0, vmax=1, interpolation="nearest")
    ax1.set_title(
        f"Original Watermark\n{np.sum(original_watermark)} ones",
        fontsize=12,
        fontweight="bold",
    )
    ax1.axis("off")

    ax2 = fig1.add_subplot(gs1[0, 1])
    ax2.imshow(wm_extracted, cmap="binary", vmin=0, vmax=1, interpolation="nearest")
    ax2.set_title(
        f"Extracted Watermark\n{np.sum(extracted_watermark)} ones",
        fontsize=12,
        fontweight="bold",
    )
    ax2.axis("off")

    ax3 = fig1.add_subplot(gs1[0, 2])
    im3 = ax3.imshow(error_2d, cmap="RdYlGn_r", interpolation="nearest", vmin=0, vmax=1)
    ax3.set_title(
        f"Error Map\n{differing_bits} errors ({normalized_hamming*100:.1f}%)",
        fontsize=12,
        fontweight="bold",
    )
    ax3.axis("off")
    cbar3 = plt.colorbar(im3, ax=ax3, fraction=0.046, pad=0.04)
    cbar3.set_label("Error", fontsize=10)

    # Confusion Matrix
    ax4 = fig1.add_subplot(gs1[0, 3])
    confusion = np.array(
        [[both_zero, orig_zero_ext_one], [orig_one_ext_zero, both_one]]
    )
    im4 = ax4.imshow(confusion, cmap="Blues", aspect="auto")
    ax4.set_xticks([0, 1])
    ax4.set_yticks([0, 1])
    ax4.set_xticklabels(["Extr: 0", "Extr: 1"], fontsize=10)
    ax4.set_yticklabels(["Orig: 0", "Orig: 1"], fontsize=10)
    ax4.set_title("Confusion Matrix", fontsize=12, fontweight="bold")
    for i in range(2):
        for j in range(2):
            color = "white" if confusion[i, j] > confusion.max() / 2 else "black"
            ax4.text(
                j,
                i,
                f"{confusion[i, j]}\n({confusion[i, j]/total_bits*100:.1f}%)",
                ha="center",
                va="center",
                color=color,
                fontsize=10,
                fontweight="bold",
            )
    cbar4 = plt.colorbar(im4, ax=ax4, fraction=0.046, pad=0.04)

    # Bottom row: Images
    ax5 = fig1.add_subplot(gs1[1, 0])
    ax5.imshow(original, cmap="gray")
    ax5.set_title("Original Image", fontsize=12, fontweight="bold")
    ax5.axis("off")

    ax6 = fig1.add_subplot(gs1[1, 1])
    ax6.imshow(watermarked, cmap="gray")
    wpsnr_val = wpsnr(original, watermarked)
    ax6.set_title(
        f"Watermarked Image\nWPSNR: {wpsnr_val:.2f} dB", fontsize=12, fontweight="bold"
    )
    ax6.axis("off")

    ax7 = fig1.add_subplot(gs1[1, 2])
    diff_img = np.abs(watermarked.astype(float) - original.astype(float))
    im7 = ax7.imshow(diff_img, cmap="hot")
    ax7.set_title(
        f"Embedding Difference\nMax: {diff_img.max():.1f}",
        fontsize=12,
        fontweight="bold",
    )
    ax7.axis("off")
    cbar7 = plt.colorbar(im7, ax=ax7, fraction=0.046, pad=0.04)

    # Statistics panel
    ax8 = fig1.add_subplot(gs1[1, 3])
    ax8.axis("off")

    stats_text = f"""QUALITY METRICS
{'='*28}

    Similarity:      {sim:.4f}
    BER:             {normalized_hamming:.4f}
    Hamming Dist:    {hamming_dist}

    MATCHING BITS:   {matching_bits:4d}
    Both 0:        {both_zero:4d}
    Both 1:        {both_one:4d}

    ERROR BITS:      {differing_bits:4d}
    False Pos:     {orig_zero_ext_one:4d}
    False Neg:     {orig_one_ext_zero:4d}

    PARAMETERS
    Alpha (LH/HL):   {alpha:.2f}

    STATUS:          {status}
"""

    ax8.text(
        0.05,
        0.95,
        stats_text,
        transform=ax8.transAxes,
        fontsize=10,
        verticalalignment="top",
        fontfamily="monospace",
        bbox=dict(
            boxstyle="round",
            facecolor=bbox_color,
            alpha=0.4,
            edgecolor="black",
            linewidth=1.5,
        ),
    )

    fig1.suptitle(
        f"Watermark Extraction Verification | Similarity: {sim:.4f} | Status: {status}",
        fontsize=16,
        fontweight="bold",
        y=0.98,
    )

    output_path1 = os.path.join("./", f"{output_prefix}extraction_overview.png")
    plt.savefig(
        output_path1, dpi=200, bbox_inches="tight", facecolor="white", edgecolor="none"
    )
    print(f"\nSaved overview plot to: {output_path1}")
    plt.close(fig1)

    print("=" * 80 + "\n")

    return {
        "similarity": sim,
        "matching_bits": matching_bits,
        "differing_bits": differing_bits,
        "hamming_distance": hamming_dist,
        "status": status,
        "original_watermark": original_watermark,
        "extracted_watermark": extracted_watermark,
    }
